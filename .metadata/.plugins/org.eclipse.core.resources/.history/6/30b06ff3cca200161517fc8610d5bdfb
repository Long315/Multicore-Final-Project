package finalProj;

import java.util.concurrent.atomic.AtomicMarkableReference;

public class PrioritySkipList<T> {
	static final int MAX_LEVEL = 30;
	final Node<T> head = new Node<T>(Integer.MIN_VALUE); 
	final Node<T> tail = new Node<T>(Integer.MAX_VALUE);
	
	public PrioritySkipList(){
		for (int i = 0; i < head.next.length; i++) {
			head.next[i] = new AtomicMarkableReference<Node<T>>(tail, false);
		}
	}
	boolean add(Node<T> node){
		return true;
	}
	
	boolean remove(Node<T> node){
		return true;
	}
	
	public Node<T> findAndMarkMin(){
//		Node<T> curr = null, succ = null;
//		curr = head.next
	}
}
